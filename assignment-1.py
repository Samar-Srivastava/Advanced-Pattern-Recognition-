# -*- coding: utf-8 -*-
"""Untitled39.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17_FIH3xxxEWKlcKoBSyG41KE8_5D-Qr6

Importing Libraries
"""

import pandas as pd
import numpy as np
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

"""Loading Dataset"""

col_names = ["Id","RI","Na","Mg","Al","Si","K","Ca","Ba","Fe","Type"]
df = pd.read_csv(
    "https://archive.ics.uci.edu/ml/machine-learning-databases/glass/glass.data",
    names=col_names
)
df.drop("Id", axis=1, inplace=True)

X = df.drop("Type", axis=1).values
y = df["Type"].values

"""Splitting & Scaling"""

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test  = scaler.transform(X_test)

"""KNN Model"""

class KNNClassifier:
    def __init__(self, k=5):
        self.k = k
    def fit(self, X, y):
        self.X_train, self.y_train = X, y
    def predict(self, X):
        preds = []
        for x in X:
            dists = np.linalg.norm(self.X_train - x, axis=1)
            k_idx = dists.argsort()[:self.k]
            k_labels = self.y_train[k_idx]
            preds.append(Counter(k_labels).most_common(1)[0][0])
        return np.array(preds)

"""Accuracy vs k"""

k_values = range(1,16)
acc = []
for k in k_values:
    model = KNNClassifier(k)
    model.fit(X_train, y_train)
    acc.append(accuracy_score(y_test, model.predict(X_test)))

plt.plot(k_values, acc, marker="o")
plt.xlabel("k")
plt.ylabel("Accuracy")
plt.title("Glass Data: KNN Accuracy vs k")
plt.show()

"""Evaluation for best K"""

best_k = k_values[np.argmax(acc)]
print("Best k:", best_k)
model = KNNClassifier(best_k)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title(f"Confusion Matrix (k={best_k})")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()